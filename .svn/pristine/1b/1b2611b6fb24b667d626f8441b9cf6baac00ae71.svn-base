package com.xzl.bat.controller;

import com.xzl.bat.domain.mapper.WxbOrderInfoMapper;
import com.xzl.bat.domain.modul.WxbOrderInfo;
import com.xzl.bat.domain.modul.WxbWorkitem;
import com.xzl.bat.service.WxbWorkitemService;
import com.xzl.boilerplate.common.dto.Pager;
import com.xzl.boilerplate.common.dto.ResultResponse;
import com.xzl.boilerplate.common.dto.exception.BizCode;
import com.xzl.boilerplate.common.dto.exception.BizException;
import com.xzl.boilerplate.common.utils.RestTemplateUtil;
import org.apache.ibatis.annotations.Param;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.AuthenticationException;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RequestMapping(value = "/workitem")
@RestController
public class WxbWorkitemController {
    @Autowired
    RestTemplateUtil restTemplateUtil;
    @Autowired
    WxbWorkitemService wxbWorkitemService;
    @Autowired
    WxbOrderInfoMapper wxbOrderInfoMapper;

    @RequestMapping(value = "/test", method = RequestMethod.GET)
    public ResultResponse tet() throws AuthenticationException, IOException {
        String url = "http://SERVICE-HI/hiya";
        url = "http://127.0.0.1:8783/hiya";
        Map body = new HashMap();
        body.put("num", 100);
        Map headers = new HashMap();
        headers.put("Content-Type", "application/json");
        headers.put("AppCode", "WXBAPP");
        headers.put("Authorization", "Bearer eyJhbGciOiJSUzUxMiJ9.eyJndWlkIjoiMSIsImV4cCI6MTUyMzAyMTkzNiwic3ViIjoiYWRtaW4iLCJjcmVhdGVkIjoxNTE2NDE3MTM2MzEyLCJybHMiOlt7ImF1dGhvcml0eSI6IlRMV19BRE1JTiJ9LHsiYXV0aG9yaXR5IjoiWUhRU0NKREdMSiJ9XX0.GhUVveH4WOYlEhHAaGjHEFNrip2VQL2rHYa5CY9ijA2cGFMYAyYFV7PCWfoihSSaiIdeE5crXf4i8ju9WaxHlkNsQwrBSBafV7RHB5ZKJGxzgDR4WVPMiq8Y8E87cCM8_H6pP5_F-AL4xsfFAwDOwong2msQVlGKjDoG5AAbeSntMsKtY8Y1yN1eDKP1pbyF-YAktE30ixTzN5jl2DbEIzmCrYnh_EY1BlBYvQq9BDVWMY0oqBidQqMWRpzQEsWA9OXQ6Vqrw3QCnFwWSkA7I48SdYgOE7Mqo_ZdEOsXqNYuxFhXr9koI11EwWmlPp4BrzGN4zcyMmURUhQKllGU4A");
        ResultResponse<String> result = restTemplateUtil.getBasePlatform(String.class,url, headers);
        url = "http://127.0.0.1:8783/hiya";
//        ResultResponse result = restTemplateUtil.postBasePlatform(String.class,url, body, null);
        return result;
    }

    @RequestMapping(value = "/web/${order.version}/maint/group", method = RequestMethod.GET)
    public ResultResponse group(@Param("index")Integer index, @Param("size")Integer size) throws AuthenticationException {
        Pager page = new Pager(index, size);
        try {
            page = wxbWorkitemService.getItemGroup(page);
        } catch (Exception e) {
            throw new BizException(BizCode.ORDER_LIST_ERROR);
        }
        return ResultResponse.createSuccessResponse(page);
    }

    @RequestMapping(value = "/web/${order.version}/maint/group/workitem", method = RequestMethod.GET)
    public ResultResponse workitem(@Param("index")Integer index, @Param("size")Integer size,@Param("groupId")Integer groupId) throws AuthenticationException {
        Pager page = new Pager(index, size);
        try {
            page = wxbWorkitemService.getItemsByGroup(page,groupId);
        } catch (Exception e) {
            throw new BizException(BizCode.ORDER_LIST_ERROR);
        }
        return ResultResponse.createSuccessResponse(page);
    }

    @RequestMapping(value = "/web/${order.version}/maint/workitem", method = RequestMethod.GET)
    public ResultResponse groupWorkitem(@RequestParam(value = "maintTypeName",required = false) String maintTypeName,
                                        @RequestParam(value = "positionName",required = false) String positionName,
                                        @RequestParam(value = "itemName",required = false) String itemName,
            @Param("index")Integer index, @Param("size")Integer size) throws AuthenticationException {
        WxbWorkitem wxbWorkitem = new WxbWorkitem();
        if (maintTypeName!=null)
            wxbWorkitem.setMaintTypeName(maintTypeName);
        if (positionName!=null)
            wxbWorkitem.setPositionName(positionName);
        if (itemName!=null)
            wxbWorkitem.setItemName(itemName);
        Pager page = new Pager(index, size);
        try {
            page = wxbWorkitemService.dimGetAllItems(wxbWorkitem,page);
        } catch (Exception e) {
            throw new BizException(BizCode.ORDER_LIST_ERROR);
        }
        return ResultResponse.createSuccessResponse(page);
    }

    @RequestMapping(value = "/web/${order.version}/maint/delGroupItem", method = RequestMethod.POST)
    public ResultResponse delGroupItem(@Param("groupId")Integer groupId, @Param("itemId")Integer itemId) throws AuthenticationException {
        try {
            wxbWorkitemService.delItemFromGroup(groupId,itemId);
        } catch (Exception e) {
            throw new BizException(BizCode.ORDER_LIST_ERROR);
        }
        return ResultResponse.createSuccessResponse(null);
    }

    @RequestMapping(value = "/web/${order.version}/maint/addGroupItem", method = RequestMethod.POST)
    public ResultResponse addGroupItem(@Param("groupId")Integer groupId, @Param("itemId")Integer itemId) throws AuthenticationException {
        try {
            wxbWorkitemService.addItemToGroup(groupId,itemId);
        } catch (Exception e) {
            throw new BizException(BizCode.ORDER_LIST_ERROR);
        }
        return ResultResponse.createSuccessResponse(null);
    }

    @RequestMapping(value = "/web/${order.version}/maint/addItem", method = RequestMethod.POST)
    public ResultResponse addItem(@RequestBody WxbWorkitem wxbWorkitem) throws AuthenticationException {
        try {
            wxbWorkitemService.addItem(wxbWorkitem);
        } catch (Exception e) {
            throw new BizException(BizCode.ORDER_LIST_ERROR);
        }
        return ResultResponse.createSuccessResponse(null);
    }

    @RequestMapping(value = "/web/${order.version}/maint/delItem", method = RequestMethod.POST)
    public ResultResponse delItem(@RequestBody List<Integer> itemIds) throws AuthenticationException {
        try {
            for (Integer itemId : itemIds) {
                WxbWorkitem wxbWorkitem = new WxbWorkitem();
                wxbWorkitem.setId(itemId);
                wxbWorkitemService.delItem(wxbWorkitem);
            }
        } catch (Exception e) {
            throw new BizException(BizCode.ORDER_LIST_ERROR);
        }
        return ResultResponse.createSuccessResponse(null);
    }

    @RequestMapping(value = "/web/${order.version}/maint/editItem", method = RequestMethod.POST)
    public ResultResponse editItem(@RequestBody WxbWorkitem wxbWorkitem) throws AuthenticationException {
        try {
            wxbWorkitemService.editItem(wxbWorkitem);
        } catch (Exception e) {
            throw new BizException(BizCode.ORDER_LIST_ERROR);
        }
        return ResultResponse.createSuccessResponse(null);
    }


    @RequestMapping(value = "/web/${order.version}/maint/editItem", method = RequestMethod.GET)
    public ResultResponse editItem(@RequestParam String registCode) throws AuthenticationException {
        List<WxbWorkitem> workitems;
        try {
            WxbOrderInfo wxbOrderInfo = new WxbOrderInfo();
            wxbOrderInfo.setRegistCode(registCode);
            List<WxbOrderInfo> list = wxbOrderInfoMapper.select(wxbOrderInfo);
            int wxbWorkItemGroup;
            if (list != null && list.size() > 0) {
                wxbWorkItemGroup = list.get(0).getMaintListId();
            }else {
                throw new BizException(BizCode.REGIST_CODE_ERROR);
            }

            workitems = wxbWorkitemService.getItemsByGroup(wxbWorkItemGroup);
        } catch (Exception e) {
            throw new BizException(BizCode.ORDER_LIST_ERROR);
        }
        return ResultResponse.createSuccessResponse(workitems);
    }
}
